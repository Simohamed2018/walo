package com.mproduits.web.controller;

import com.mproduits.dao.CompteDao;
import com.mproduits.model.Compte;
import com.mproduits.service.CompteService;
import com.mproduits.service.CompteServiceImp;
import com.mproduits.web.exceptions.CompteAlreadayExistException;
import com.mproduits.web.exceptions.CompteNotFoundException;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

@Api("API pour les opérations CRUD sur les produits.")
@RestController
public class CompteController {

	@Autowired
	CompteService productService;
	// Affiche la liste de tous les produits disponibles
	@ApiOperation(value = "Récupère tous les compte en stock!")
	@GetMapping(value = "/produits")
	public List<Compte> listeDesProduits() {

		List<Compte> products = productService.listeDesProduits();
		if (products.isEmpty())
			throw new CompteNotFoundException("Aucun compte n'est disponible à la vente");

		return products;

	}

	// Récuperer un compte par son id
	@ApiOperation(value = "Récupère un compte grâce à son ID à condition que celui-ci soit en stock!")
	@GetMapping(value = "/produits/{id}")
	public Compte recupererUnProduit(@PathVariable int id) {

		Compte product = productService.recupererUnProduit(id);

		if (product == null)
			throw new CompteNotFoundException("Le compte correspondant à l'id " + id + " n'existe pas");

		return product;
	}

	// Ajouter un compte
	@PostMapping(value = "/produits/add")
	public Compte ajouterUnProduit(@Valid @RequestBody Compte compte) {
		// if(compte == null) throw new ProductAlreadayExistException("Le compte
		// correspondant ne peut etre null ");
		if (compte == null || compte.isEmpty() || compte.getCompte() == null)
			throw new CompteAlreadayExistException("Le compte correspondant ne peut etre null ");

		return productService.ajouterUnProduit(compte);
	}

	@ApiOperation(value = "Modifier  un compte grâce à son ID à condition que celui-ci soit en stock!")
	@PutMapping(value = "/produits")
	public void updateProduit(@RequestBody Compte product) {

		productService.ajouterUnProduit(product);
	}

	@ApiOperation(value = "Supprimer un compte grâce à son ID à condition que celui-ci soit en stock!")
	@DeleteMapping(value = "/produits/{id}")
	public void supprimerProduit(@PathVariable int id) {

		productService.supprimerProduit(id);
	}

	

	// ajouter un compte
	@ApiOperation(value = "ajouter un compte grâce à son ID à condition que celui-ci soit en stock!")
	@PostMapping(value = "/produits")
	public ResponseEntity<Void> ajouterProduit(@RequestBody Compte product) {

		Compte productAdded = productService.ajouterProduit(product);

		if (productAdded == null)
			return ResponseEntity.noContent().build();

		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
				.buildAndExpand(productAdded.getId()).toUri();
		return ResponseEntity.created(location).build();
	}
	
	//afficher la marge du compte
	@GetMapping(value="/adminProduits")
	public List<String> calculerMargeProduit(){
		List<Compte> products = productService.calculerMargeProduit();
		if (products.isEmpty())
			throw new CompteNotFoundException("Aucun compte n'est disponible à la vente");
		List<String> maliste= products.stream()
		.map(p->p + " : "+(p.getVente() - p.getPrix()) )
		.collect(Collectors.toList());
		return maliste;
		
	}
}
